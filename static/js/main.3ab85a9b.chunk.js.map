{"version":3,"sources":["Components/Card.jsx","Components/CardList.jsx","Components/SearchBox.jsx","Components/Scroll.jsx","Containers/App.jsx","registerServiceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cardsArray","robots","map","robot","Components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","e","setState","target","value","state","bind","assertThisInitialized","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","Components_SearchBox","Components_Scroll","Components_CardList","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_Containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3ab85a9b.chunk.js","sourcesContent":["import React from 'react';\n\n// props deconstruction AHEAD:\nconst Card = ({name, email, id}) => { \n\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow b2 shadow-5\" >\n            <img alt='robots' src={`https://www.robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    const cardsArray = robots.map((robot) => {\n        return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\n    })\n\n    return (\n        <div>\n            {cardsArray}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div>\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type='search'\n                placeholder='Search Robots'\n                onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n      <div className=\"\" style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n          {props.children}\n      </div>\n  )\n}\n\nexport default Scroll;","import React from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from \"../Components/Scroll\"\nimport './App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            robots: [],\n            searchField: \"\"\n        }\n\n        this\n            .onSearchChange\n            .bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}))\n    }\n\n    onSearchChange = (e) => {\n        this.setState({searchField: e.target.value});\n    }\n\n    render() {\n        const {robots, searchField} = this.state;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot\n                .name\n                .toLowerCase()\n                .includes(searchField.toLowerCase());\n        });\n        return !robots.length\n            ? (\n                <div className=\"tc\">\n                    <h1>Loading...</h1>\n                </div>\n            )\n            : (\n                <div className=\"tc\">\n                    <h1 className=\"f1\">Robo Friends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            )\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\n\nimport App from './Containers/App';\n\nimport './index.css';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}